// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  //binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl"]
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usuário
model User {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  userTypeId        Int       @default(1)
  password          String?   @db.VarChar(255)
  profileImage      String?   @db.VarChar(255)
  resetToken        String?   @unique
  resetTokenExpires DateTime?

  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  searchHash        String?   @db.Text

  BranchesUser      BranchUser[]
  OrderActions      OrderAction[]

  @@map("Users")
}

// Filial
model Branch {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  cnpj        String    @unique @db.VarChar(14)
  phone       String?   @db.VarChar(20)
  email       String?   @db.VarChar(100)
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(100)
  state       String?   @db.VarChar(2)
  zipCode     String?   @db.VarChar(8)

  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  searchHash  String?   @db.Text

  Orders        Order[]
  BranchUsers   BranchUser[]

  @@map("Branches")
}

// Usuário da filial
model BranchUser {
  branchId   Int
  userId     Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Branch Branch @relation(fields: [branchId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  @@id(name: "id", [branchId, userId])
  @@map("BranchUsers")
}

// Fornecedor
model Supplier {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(100)
  cnpj       String    @unique @db.VarChar(14)
  phone      String?   @db.VarChar(20)
  email      String?   @db.VarChar(100)
  address    String?   @db.VarChar(255)
  city       String?   @db.VarChar(100)
  state      String?   @db.VarChar(2)
  zipCode    String?   @db.VarChar(8)

  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  searchHash String?   @db.Text

  Orders Order[]

  @@map("Suppliers")
}

// Ordem de compra
model Order {
  id               Int       @id @default(autoincrement())
  branchId         Int
  supplierId       Int
  description      String    @db.VarChar(100)
  details          String?   @db.Text
  
  status           Int?      @default(1)
  priority         Int?      @default(1)
  
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  searchHash       String?   @db.Text

  Branch            Branch             @relation(fields: [branchId], references: [id])
  Supplier          Supplier           @relation(fields: [supplierId], references: [id])
  OrderActions      OrderAction[]
  OrderProducts     OrderProduct[]

  @@map("Orders")
}

// Categoria de produto
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  details     String?   @db.Text

  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  searchHash  String?   @db.Text

  Products    Product[]

  @@map("Categories")
}

// Produto
model Product {
  id              Int       @id @default(autoincrement())
  name            String    @unique @db.VarChar(100)
  categoryId      Int
  unitMeasure     String    @db.VarChar(10)
  unitValue       Float?
  description     String?   @db.Text

  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  searchHash      String?   @db.Text

  Category        Category @relation(fields: [categoryId], references: [id])
  OrderProducts   OrderProduct[]

  @@map("Products")
}

// Produto da ordem
model OrderProduct {
  orderId    Int
  productId  Int
  quantity   Int
  unitValue  Float

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  Order   Order   @relation(fields: [orderId], references: [id])
  Product Product @relation(fields: [productId], references: [id])

  @@id(name: "id", [orderId, productId])
  @@map("OrderProducts")
}

// (Histórico) Ação da ordem
model OrderAction {
  userId                 Int
  orderId                Int
  orderActionTypeId      Int       @default(1)
  status                 Int?      @default(1)
  priority               Int?      @default(1)
  details                String?   @db.VarChar(255)

  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt

  User                   User      @relation(fields: [userId], references: [id])
  Order                  Order     @relation(fields: [orderId], references: [id])
  
  @@id(name: "id", [userId, orderId])
  @@map("OrderActions")
}
