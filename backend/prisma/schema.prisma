// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  //binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl"]
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserType {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Users User[]

  @@map("UserTypes")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  cpf               String?   @unique @db.VarChar(11)
  userTypeId        Int
  password          String?   @db.VarChar(255)
  profileImage      String?   @db.VarChar(255)
  isActive          Boolean   @default(true)
  resetToken        String?   @unique
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  searchHash        String?   @db.Text

  UserType          UserType           @relation(fields: [userTypeId], references: [id])
  CourseUsers       CourseUser[]
  Submissions       Submission[]
  SubmissionActions SubmissionAction[]

  @@map("Users")
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  code        String    @unique @db.VarChar(10)
  periods     Int
  minWorkload Int       @default(240)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  searchHash  String?   @db.Text

  CourseUsers          CourseUser[]
  CourseActivityGroups CourseActivityGroup[]

  @@map("Courses")
}

model CourseUser {
  id         Int      @id @default(autoincrement())
  courseId   Int
  userId     Int
  enrollment String?  @unique @db.VarChar(20)
  startYear  Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Course Course @relation(fields: [courseId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  @@map("CourseUsers")
}

model ActivityGroup {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  searchHash            String?   @db.Text

  CourseActivityGroups CourseActivityGroup[]

  @@map("ActivityGroups")
}

model CourseActivityGroup {
  id              Int       @id @default(autoincrement())
  courseId        Int
  activityGroupId Int
  maxWorkload     Int       @default(240)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  Course        Course        @relation(fields: [courseId], references: [id])
  ActivityGroup ActivityGroup @relation(fields: [activityGroupId], references: [id])
  Activities    Activity[]

  @@map("CourseActivityGroups")
}

model Activity {
  id                    Int       @id @default(autoincrement())
  courseActivityGroupId Int
  name                  String    @db.VarChar(100)
  description           String?   @db.VarChar(255)
  maxWorkload           Int
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt

  searchHash            String?   @db.Text

  CourseActivityGroup CourseActivityGroup @relation(fields: [courseActivityGroupId], references: [id])
  Submissions         Submission[]

  @@map("Activities")
}

model Submission {
  id               Int       @id @default(autoincrement())
  userId           Int
  activityId       Int
  description      String    @db.VarChar(100)
  file             String?   @db.VarChar(255)
  workload         Int
  status           Int?      @default(1)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  searchHash       String?   @db.Text

  User              User               @relation(fields: [userId], references: [id])
  Activity          Activity           @relation(fields: [activityId], references: [id])
  SubmissionActions SubmissionAction[]

  @@map("Submissions")
}

model SubmissionActionType {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(30)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  SubmissionActions SubmissionAction[]

  @@map("SubmissionActionTypes")
}

model SubmissionAction {
  id                     Int     @id @default(autoincrement())
  userId                 Int
  submissionId           Int
  submissionActionTypeId Int
  details                String? @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  User                 User                 @relation(fields: [userId], references: [id])
  Submission           Submission           @relation(fields: [submissionId], references: [id])
  SubmissionActionType SubmissionActionType @relation(fields: [submissionActionTypeId], references: [id])

  @@map("SubmissionActions")
}
